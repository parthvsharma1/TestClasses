import java.time.Duration

plugins {
    id 'java'
//    id "org.ajoberstar.grgit" version "1.6.0"
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation project(':LibraryCode')
    implementation group: 'org.reflections', name: 'reflections', version: '0.9.10'
    implementation 'org.springframework:spring-beans:5.2.0.RELEASE'
    implementation 'org.springframework:spring-context:5.2.0.RELEASE'
    implementation 'org.springframework:spring-core:5.2.0.RELEASE'
    implementation 'org.springframework:spring-webmvc:5.2.0.RELEASE'
    implementation 'cglib:cglib:3.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
}



task cyclefinder (type: JavaExec){

    group = 'Run' // <-- change the name as per your need
    description = 'Small description what this run will do'


    def ip = new ByteArrayOutputStream()
    classpath sourceSets.main.runtimeClasspath // <-- Don't change this
    main = "com.spr.FindCyclicDependency"
    args "arg1", "arg2"
    standardOutput = ip

//
    // clean the build folder by running gradle clean from command line
    doLast {
        println 'printed op is : '+ip
        exec {
            workingDir '.'
            commandLine 'gradle', 'clean'
        }
    }

}

long timeOutLimit=45

task CircDep {
    group = 'MyGroup'
    description = 'Runs findcyclicdependency.java'
    dependsOn 'build'


    ArrayList<String> commitHashes=new ArrayList<>()
    String numCommits = "git rev-list --count HEAD".execute().text.trim().toString()
    Integer numberOfCommits = Integer.valueOf(numCommits)

    String suffix = ""
    for (int i = 0; i < numberOfCommits; i++) {
        if(i!=0)
            suffix = suffix + "^"

        String command = "git rev-parse HEAD" + suffix
        String currentCommit = command.execute().text.trim().toString();
        commitHashes.add(currentCommit)
    }

    String startingCommit=commitHashes.get(0);


    boolean goodCommit = false

    for (int i = 1; i < numberOfCommits; i++) {
        // run main
        doLast {
            boolean cycleFound = true;
            int h = Math.abs(new Random().nextInt() % 6000) /// fix this
            String name = 'my task ' + h.toString();

            try {
                tasks.create(name, JavaExec) {
                    main = 'com.spr.FindCyclicDependency'
                    args = ['foo', 'bar']
                    classpath = sourceSets.main.runtimeClasspath
                }.exec()
            } catch (Exception e) {
                cycleFound = false
            }

            if (cycleFound == false) {
                goodCommit = true
                println 'Commit with no cyclic dependency is : ' + commitHashes.get(0)
                exec {
                    workingDir '.'
                    commandLine 'git', 'checkout',startingCommit
                    standardOutput = new ByteArrayOutputStream()

                }

                exec {
                    workingDir '.'
                    commandLine 'gradle','--stop'
                }

            }

        }
        doLast {
            commitHashes.remove(commitHashes.get(0))
            exec {
                workingDir '.'
                commandLine 'git', 'checkout', '-f', commitHashes.get(0)
                standardOutput = new ByteArrayOutputStream()
            }

            timeout=Duration.ofSeconds(timeOutLimit)
        }

        doLast {
            exec {
                workingDir '.'
                commandLine 'gradle', 'compileJava'
                standardOutput = new ByteArrayOutputStream()

            }

        }


    }



    doLast {
        if(!goodCommit)
            println 'All Commits have Cycles !!!'

        println 'Going back to Latest Commit............'
        exec {
            workingDir '.'
            commandLine 'git', 'checkout', startingCommit
            standardOutput = new ByteArrayOutputStream()
        }
        timeout=Duration.ofSeconds(timeOutLimit)

    }


}


task lucky{
    group = 'keepgoing'
    description = '10 days to go findcyclicdependency.java'
    dependsOn 'build'
    long now=System.currentTimeMillis()
    doLast{
        exec {
            workingDir '.'
            commandLine 'gradle', 'clean'
        }
    }
//    timeout=Duration.ofSeconds(3)


//            System.out.println("After task :"+(System.currentTimeMillis()-now))

}




